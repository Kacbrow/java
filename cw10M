#Zad.1 MusicPlayer!
public interface MusicPlayer {
    abstract void turnOn();
    abstract  void turnOff();
    abstract  void nextTrack();
}
public class Radio implements MusicPlayer {
    boolean isOn = false;
    @Override
    public void turnOn() {
        System.out.println("Radio jest właczone");
        isOn = true;
    }
    @Override
    public void turnOff() {
        System.out.println("Radio wyłączone");
        isOn = false;
    }
    @Override
    public void nextTrack() {
        System.out.println("Zmienniono stację");
    }
}



#zad.2 MediaPlayer!
public interface MediaPlayer {
    abstract void play(String trackName);
    abstract void pause();
    abstract String getCurrentTrack();
}
public class AudioPlayer implements MediaPlayer {


    @Override
    public void play(String trackName) {
        System.out.println("Start"+trackName);
    }
    @Override
    public void pause() {
        System.out.println("Pauza");
    }
    @Override
    public String getCurrentTrack() {
        return null;
    }
}
public class ViedoPlayer implements MediaPlayer {
    @Override
    public void play(String trackName) {
    }
    @Override
    public void pause() {
        System.out.println("Pauza");
    }
    @Override
    public String getCurrentTrack() {
        return null;
    }
}


#zad.3 Storage!
public interface Storage {
    abstract boolean save(String data);
    abstract boolean delete(String identifier);
    abstract String retrieve(String identifier);
}
public class FileStorage implements Storage {
    @Override
    public boolean save(String data) {
        System.out.println("Save"+data);
        return true;
    }
    @Override
    public boolean delete(String identifier) {
        System.out.println("Delete"+identifier);
        return true;
    }
    @Override
    public String retrieve(String identifier) {
        System.out.println("Pobranie"+identifier);
        return "Pobranie dane";
    }
}
public class DatabaseStorage implements Storage {
    @Override
    public boolean save(String data) {
        System.out.println("Save"+data);
        return true;
    }
    @Override
    public boolean delete(String identifier) {
        System.out.println("Delete"+identifier);
        return true;
    }
    @Override
    public String retrieve(String identifier) {
        System.out.println("Pobranie"+identifier);
        return "Pobranie danych";
    }
}


#zad.4 VehicleManager!
public interface VehicleManager {
    abstract String startEngine();
    abstract int getFuelLevel();
}
class car implements VehicleManager
{
    @Override
    public String startEngine() {
        return "Silnik samochodu uruchomiony";
    }
    @Override
    public int getFuelLevel() {
        return 50;
    }
}
class Motorcycle implements VehicleManager
{
    @Override
    public String startEngine() {
        return "Silnik motocykla uruchomiony";
    }
    @Override
    public int getFuelLevel() {
        return 30;
    }
}
class VehicleManagerTest
{
    public static void main(String[] args)
    {
        car car1 = new car();
        car1.startEngine();
        car1.getFuelLevel();
        System.out.println(car1.startEngine());
        System.out.println(car1.getFuelLevel());
    }
}


# Zad.5 MyComparator
public interface MyComparator {
    public int compare(int a, int b);
}
public class TestMyComparator implements MyComparator {
    @Override
    public int compare(int a, int b) {
        if (a < b)
            return -1;
        if (a == b)
            return 0;
        return 1;
    }
}



Main!
public class Main {
    public static  void main(String[] args) {

        AudioPlayer audioPlayer = new AudioPlayer();
        audioPlayer.play("Utwór 1");

        ViedoPlayer audiplayer = new ViedoPlayer();
        audioPlayer.play("Video 1");

        System.out.println(audioPlayer.getCurrentTrack());

        TestMyComparator a=new TestMyComparator();
        System.out.println(a.compare(7,4));
        System.out.println(a.compare(7,7));

        Storage s1=new FileStorage();
        s1.save("s1");
        s1.retrieve("123");
        s1.delete("345");
        System.out.println(s1);

    }
}



