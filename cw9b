import java.time.LocalDate;
import java.util.Comparator;

public class Ksiazka implements Comparable  {
    String tytul;
    int liczbaStron;
    LocalDate dataWydania;

    public Ksiazka(int liczbaStron) {

        this.liczbaStron=liczbaStron;
    }

    @Override
    public String toString() {
        return "Strony "+liczbaStron;
    }


    @Override
    public int compareTo(Object o) {
        return 0;
    }
}
class test2 implements Comparator<Ksiazka>{



    @Override
    public int compare(Ksiazka o1, Ksiazka o2) {
        return Integer.compare(o1.liczbaStron,o2.liczbaStron);
    }
}

import java.time.LocalDate;
import java.util.Comparator;

public class Order implements Comparator<Order> {
    int id;
    String customerName;
    LocalDate orderDate;

    public Order(int id, LocalDate orderDate) {
        this.id=id;
        this.orderDate=orderDate;
    }

    @Override
    public String toString() {
        return "Order{" +
                "id=" + id +
                ", orderDate=" + orderDate +
                '}';
    }

    @Override
    public int compare(Order o1, Order o2) {
        return 0;
    }


}
class test4 implements Comparator<Order> {

    @Override
    public int compare(Order o1, Order o2) {
        if((o1.orderDate.compareTo(o2.orderDate))==0) {
            return Integer.compare(o1.id,o2.id);
        }
        return o1.orderDate.compareTo(o2.orderDate);
    }
}


import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class Osoba implements Comparable<Osoba>, Cloneable{
    String name;
    double height;
    int age;

    public Osoba(String name, double height, int age) {
        this.name=name;
        this.height=height;
        this.age=age;
    }

    public Osoba(double height, int age) {
        this.height=height;
        this.age=age;
    }

    public Osoba(int age) {
        this.age=age;
    }

    @Override
    public String toString() {
        return " height=" + height +
                ", age=" + age;
    }

    @Override
    protected Object clone() throws CloneNotSupportedException {
       return super.clone();
    }

    @Override
    public int compareTo(Osoba o) {
        return 0;
    }


    public static class Main {
        public static void main(String[] args) {
            ArrayList<Osoba> osobaList = new ArrayList<>();
            osobaList.add(new Osoba(156.0, 15));
            osobaList.add(new Osoba(158.0, 18));
            osobaList.add(new Osoba(256.0, 18));
            osobaList.add(new Osoba(176.0, 18));
            System.out.println(osobaList);
            Collections.sort(osobaList, new OsobaheightComparator());
            System.out.println(osobaList);

            ArrayList<Osoba> osobaList2 = new ArrayList<>();
            osobaList2.add(new Osoba(156.0, 15));
            osobaList2.add(new Osoba(158.0, 18));
            osobaList2.add(new Osoba(256.0, 18));
            osobaList2.add(new Osoba(176.0, 18));
            Collections.sort(osobaList2, new OsobaAgeComparator());
            System.out.println(osobaList2);



        }




    }

}
class OsobaheightComparator implements Comparator<Osoba> {

    @Override
    public int compare(Osoba o1, Osoba o2) {
        return Double.compare(o2.height, o1.height);
    }
}
class OsobaAgeComparator implements  Comparator<Osoba> {

    @Override
    public int compare(Osoba o1, Osoba o2) {
        return Integer.compare(o2.age, o1.age);
    }
}



import java.util.Comparator;

public class Samochod implements Comparable {
    String marka;
    int przebieg;
    int rokProdukcji;

    @Override
    public String toString() {
        return "Samochod{" +
                "przebieg=" + przebieg +
                '}';
    }

    public Samochod(int przebieg) {
        this.przebieg=przebieg;
    }


    @Override
    public int compareTo(Object o) {
        return 1;
    }
}
class test implements Comparator<Samochod> {


    @Override
    public int compare(Samochod o1, Samochod o2) {
        return Integer.compare(o1.przebieg,o2.przebieg);
    }
}


import java.util.Comparator;

public class Zamowienie implements Comparable<Zamowienie> {
    String nazwaProduktu;
    int ilosc;
    double cenaJednostkowa;

    public Zamowienie() {

    }

    @Override
    public int compareTo(Zamowienie o) {
        if(Double.compare(o.cenaJednostkowa,this.cenaJednostkowa)==0) {
            return Double.compare(o.ilosc,this.ilosc);
        }
        return Double.compare(o.cenaJednostkowa,this.cenaJednostkowa);
    }
}
